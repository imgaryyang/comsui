SET FOREIGN_KEY_CHECKS=0;

DELETE from galaxy_autotest_yunxin.`t_delay_processing_task_config`;
DELETE from galaxy_autotest_yunxin.`t_source_repository`;

INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`) VALUES ('1', '598ef68c-3927-11e7-ac39-2b4f0a474890', 'zhongan', '众安保险', '20000', '回购后置任务', '10002', '变更还款金额', '1', '0', 'f1e74c2c-3927-11e7-ac39-2b4f0a474890', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`) VALUES ('2', '8ffcaf61-3940-11e7-ab82-525400dbb013', 'zhongan', '众安保险', '30000', '核销后置任务', '10003', '变更已还金额', '1', '0', 'fc2592b9-393f-11e7-ab82-525400dbb013', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`) VALUES ('3', '374da0c4-3935-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', '10000', '变更数据同步', '10001', '变更还款时间', '1', '0', 'c9699350-3935-11e7-952e-ba77244e1da4', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`) VALUES ('4', '402fd71a-393b-11e7-bf99-00163e002839', 'zhongan', '众安保险', '10000', '变更数据同步', '10002', '变更还款金额', '1', '0', 'a4f3125d-393b-11e7-bf99-00163e002839', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`) VALUES ('5', '8aec6aa6-46ac-11e7-881a-b208103af10b', 'zhongan', '众安保险', '40000', '浮动费用数据同步', '10002', '变更还款金额', '1', '0', 'a35f1b36-46ae-11e7-881a-b208103af10b', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`) VALUES ('7', '598ef68c-3927-11e7-ac39-2b4f0a474890', 'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskCacheHandler, SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object> inputMap, Map<String, Object> resultMap,Log log) {\r\n        try{\r\n            Date now = new Date();\r\n            String contractUniqueId = (String)inputMap.get(\"uniqueId\");\r\n            String contractNo = (String) inputMap.get(\"contractNo\");\r\n            String taskConfigUuid =(String) inputMap.get(\"taskConfigUuid\");\r\n\r\n            SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(contractUniqueId, contractNo);\r\n            ContractSnapshot contractSnapshot = sandboxDataSet.getContractSnapshot();\r\n            RepurchaseDocSnapshot repurchaseDocSnapshot = sandboxDataSet.getRepurchaseDocSnapshot();\r\n\r\n            DelayProcessingTask task = new DelayProcessingTask();\r\n            task.setCreateTime(now);\r\n            task.setConfigUuid(taskConfigUuid);\r\n            task.setRepurchaseDocUuid(repurchaseDocSnapshot.getRepurchaseDocUuid());\r\n            task.setTaskExecuteDate(DateUtils.addDays(now, 1));\r\n\r\n            HashMap<String, Object> map = new HashMap<String, Object>();\r\n            map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n            map.put(\"loanNo\", contractSnapshot.getUniqueId());\r\n						byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSet.getIdCardNo().getBytes());\r\n						String idCardNo = new String(encode_byte);\r\n            map.put(\"thirdUserNo\",idCardNo);\r\n            map.put(\"installmentNo\", 0);\r\n            map.put(\"principal\",repurchaseDocSnapshot.getRepurchasePrincipal());\r\n            map.put(\"interest\",repurchaseDocSnapshot.getRepurchaseInterest());\r\n            map.put(\"repayCharge\",repurchaseDocSnapshot.getRepurchaseOtherCharges().add(repurchaseDocSnapshot.getRepurchasePenalty()));\r\n            map.put(\"changeType\",8);\r\n            map.put(\"tradeTime\",repurchaseDocSnapshot.getCreateTime());\r\n            String workParams = com.zufangbao.sun.utils.JsonUtils.toJSONString(map);\r\n            task.setWorkParams(workParams);\r\n\r\n            task.setFinancialContractUuid(contractSnapshot.getFinancialContractUuid());\r\n            task.setContractUuid(contractSnapshot.getUuid());\r\n            task.setCustomerUuid(contractSnapshot.getCustomerUuid());\r\n            task.setCreateTime(now);\r\n            task.setLastModifyTime(now);\r\n\r\n            delayProcessingTaskCacheHandler.save_to_db_cache(task);\r\n\r\n            return true;\r\n        }catch (Exception e){\r\n            return false;\r\n        }\r\n    }', 'f1e74c2c-3927-11e7-ac39-2b4f0a474890', NULL, '2017-05-27 18:13:55', '2017-05-27 18:13:55', 'sys',
'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,org.apache.commons.logging.Log');

INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES ('8', '8ffcaf61-3940-11e7-ab82-525400dbb013',
        'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler, SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object> inputMap, Map<String, Object> resultMap,Log log) {\r\n\r\n        Date now = new Date();\r\n        String contractUniqueId = (String)inputMap.get(\"uniqueId\");\r\n        String contractNo = (String) inputMap.get(\"contractNo\");\r\n\r\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_by_contract_uniqueId_contractNo(contractUniqueId, contractNo);\r\n        ContractSnapshot contractSnapshot = sandboxDataSet.getContractSnapshot();\r\n        DelayProcessingTask task = new DelayProcessingTask();\r\n\r\n        task.setTaskExecuteDate(DateUtils.addDays(now, 1));\r\n\r\n        task.setFinancialContractUuid(contractSnapshot.getFinancialContractUuid());\r\n        task.setContractUuid(contractSnapshot.getUuid());\r\n        task.setCustomerUuid(contractSnapshot.getCustomerUuid());\r\n        task.setRepaymentPlanUuid((String)inputMap.get(\"repaymentPlanUuid\"));\r\n        task.setRepurchaseDocUuid((String)inputMap.get(\"repurchaseDocUuid\"));\r\n        task.setConfigUuid((String)inputMap.get(\"configUuid\"));\r\n        task.setCreateTime(now);\r\n        task.setLastModifyTime(now);\r\n\r\n        Map<String,String> workParams = new HashMap<String,String>();\r\n        int repayType = getRepayType((RepaymentPlanModifyReason)inputMap.get(\"repaymentPlanModifyReason\"), (com.zufangbao.sun.yunxin.entity.AssetRecoverType)inputMap.get(\"assetRecoverType\"));\r\n        int currentPeriod = getCurrentPeriod(repayType, (Integer) inputMap.get(\"assetSetCurrentPeriod\"));\r\n        com.zufangbao.sun.yunxin.entity.model.RepaymentChargesDetail detailAmount = (com.zufangbao.sun.yunxin.entity.model.RepaymentChargesDetail)inputMap.get(\"detailAmount\");\r\n        workParams.put(\"tradeNo\", UUID.randomUUID().toString());\r\n        workParams.put(\"loanNo\", contractSnapshot.getUniqueId());\r\n				byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSet.getIdCardNo().getBytes());\r\n				String idCardNo = new String(encode_byte);\r\n        workParams.put(\"thirdUserNo\", idCardNo);\r\n        workParams.put(\"installmentNo\", currentPeriod+\"\");\r\n        workParams.put(\"paidPrincipal\", AmountUtils.transToAmount(detailAmount.getLoanAssetPrincipal())+\"\");\r\n        workParams.put(\"paidInterest\", AmountUtils.transToAmount(detailAmount.getLoanAssetInterest())+\"\");\r\n        workParams.put(\"paidRepayCharge\", AmountUtils.transToAmount(detailAmount.get_total_fee_except_principal_interest())+\"\");\r\n        workParams.put(\"repayType\", repayType+\"\");\r\n        workParams.put(\"tradeTime\", DateUtils.format((Date)inputMap.get(\"tradeTime\"),com.zufangbao.sun.utils.DateUtils.LONG_DATE_FORMAT));\r\n\r\n        task.setWorkParams(com.zufangbao.sun.utils.JsonUtils.toJsonString(workParams));\r\n\r\n        delayProcessingTaskHandler.save_to_db_cache(task);\r\n        resultMap.put(\"delayProcessingTaskUuid\", task.getUuid());\r\n        return true;\r\n    }\r\n    private int getRepayType(RepaymentPlanModifyReason repaymentPlanModifyReason, com.zufangbao.sun.yunxin.entity.AssetRecoverType assetRecoverType){\r\n        //1. 提前结清还款\r\n        //2. 退货还款\r\n        //3. 回购还款\r\n        //4. 正常还款\r\n        if(assetRecoverType.isRepurchaseAsset()){\r\n            return 3;\r\n        }\r\n\r\n        if(repaymentPlanModifyReason==RepaymentPlanModifyReason.REASON_6\r\n                ||repaymentPlanModifyReason==RepaymentPlanModifyReason.REASON_8){\r\n            return 1;\r\n        }\r\n        if(repaymentPlanModifyReason==RepaymentPlanModifyReason.REASON_9){\r\n            return 2;\r\n        }\r\n\r\n        return 4;\r\n    }\r\n\r\n    private int getCurrentPeriod(int repayType, Integer assetSetCurrentPeriod){\r\n        if(repayType==3){\r\n            return 0;\r\n        }\r\n        return assetSetCurrentPeriod==null?0:assetSetCurrentPeriod;\r\n    }',
        'fc2592b9-393f-11e7-ab82-525400dbb013', NULL, '2017-05-27 18:13:55', '2017-05-27 18:13:55', 'sys',
        'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,org.apache.commons.logging.Log');

INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`) VALUES ('9', '374da0c4-3935-11e7-952e-ba77244e1da4', 'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler,\r\n                             SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object>\r\n                                     inputMap, Map<String, Object> resultMap,Log log) {\r\n        try {\r\n            if (processedResult != null && !StringUtils.equalsIngoreNull(\"0\", processedResult.getCode())) {\r\n                return false;\r\n            }\r\n            List<String> repaymentPlanNoList = (List<String>)inputMap.get(SandboxDataSetSpec.REPAYMENT_PLAN_NO_LIST);\r\n            String financialContractUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.FINANCIAL_CONTRACT_UUID, \"\");\r\n            String contractUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONTRACT_UUID, \"\");\r\n            String configUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONFING_UUID, \"\");\r\n\r\n            SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid,repaymentPlanNoList);\r\n            String changeType = (String) sandboxDataSet.getExtraData().getOrDefault(\"reasonCode\", null);\r\n            if (changeType == null || configUuid == null) {\r\n                return false;\r\n            }\r\n            if (StringUtils.equalsIngoreNull(changeType, RepaymentPlanModifyReason.REASON_4.getOrdinal() + \"\")) {\r\n                changeType = \"1\";\r\n            } else if (StringUtils.equalsIngoreNull(changeType, RepaymentPlanModifyReason.REASON_5.getOrdinal() + \"\")) {\r\n                changeType = \"2\";\r\n            } else {\r\n                return false;\r\n            }\r\n						byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSet.getIdCardNo().getBytes());\r\n						String idCardNo = new String(encode_byte);\r\n            String uniqueId = sandboxDataSet.getContractUniqueId();\r\n            Date taskExecuteDate = DateUtils.addDays(DateUtils.getToday(), 1);\r\n\r\n            List<PaymentPlanSnapshot> paymentPlanSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\r\n            for (PaymentPlanSnapshot paymentPlanSnapshot: paymentPlanSnapshotList) {\r\n                HashMap<String, Object> map = new HashMap<String, Object>();\r\n                map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n                map.put(\"loanNo\", uniqueId);\r\n                map.put(\"thirdUserNo\", idCardNo);\r\n                map.put(\"installmentNo\", paymentPlanSnapshot.getCurrentPeriod());\r\n                map.put(\"agreedRepayDate\", paymentPlanSnapshot.getAssetRecycleDate());\r\n                map.put(\"changeType\", changeType);\r\n                map.put(\"tradeTime\", paymentPlanSnapshot.getCreateTime());\r\n\r\n                JSONObject jsonObject = new JSONObject(map);\r\n                String workParam = com.zufangbao.sun.utils.JsonUtils.toJSONString(jsonObject);\r\n\r\n                DelayProcessingTask task = new DelayProcessingTask(paymentPlanSnapshot, taskExecuteDate, workParam,\r\n                        configUuid);\r\n                delayProcessingTaskHandler.save_to_db_cache(task);\r\n            }\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }', 'c9699350-3935-11e7-952e-ba77244e1da4', NULL, '2017-05-15 18:20:38', '2017-05-15 18:20:38', 'sys',
'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,com.alibaba.fastjson.JSONObject,org.apache.commons.logging.Log');

INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`) VALUES ('10', '402fd71a-393b-11e7-bf99-00163e002839', 'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler,\r\n			SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object> inputMap, Map<String, Object> resultMap, Log log) {\r\n		try {\r\n\r\n			if (processedResult == null || !StringUtils.equalsIngoreNull(\"0\", processedResult.getCode())) {\r\n				return false;\r\n			}\r\n			String financialContractUuid = (String) inputMap.get(SandboxDataSetSpec.FINANCIAL_CONTRACT_UUID);\r\n			String contractUuid = (String) inputMap.get(SandboxDataSetSpec.CONTRACT_UUID);\r\n			List<String> repaymentPlanNoSrcList = (List<String>)inputMap.get(SandboxDataSetSpec.ORIGINAL_REPAYMENT_PLAN_NO_LIST);\r\n			List<String> repaymentPlanNoTarList = (List<String>)inputMap.get(SandboxDataSetSpec.REPAYMENT_PLAN_NO_LIST);\r\n	        String configUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONFING_UUID, \"\");\r\n\r\n			SandboxDataSet sandboxDataSetSrc = sandboxDataSetHandler\r\n					.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid, repaymentPlanNoSrcList);\r\n			SandboxDataSet sandboxDataSetTar = sandboxDataSetHandler\r\n					.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid, repaymentPlanNoTarList);\r\n\r\n			String reason = (String) sandboxDataSetTar.getExtraData().getOrDefault(\"reasonCode\", null);\r\n			int reasonCode = Integer.valueOf(reason);\r\n\r\n			String changeType = null;\r\n			if (RepaymentPlanModifyReason.REASON_7.getOrdinal() == reasonCode) {\r\n				changeType = \"3\";\r\n			} else if (RepaymentPlanModifyReason.REASON_8.getOrdinal() == reasonCode) {\r\n				changeType = \"4\";\r\n			} else if (RepaymentPlanModifyReason.REASON_6.getOrdinal() == reasonCode) {\r\n				changeType = \"5\";\r\n			} else if (RepaymentPlanModifyReason.REASON_9.getOrdinal() == reasonCode) {\r\n				changeType = \"6\";\r\n			}\r\n			if (changeType == null) {\r\n				return false;\r\n			}\r\n			byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSetTar.getIdCardNo().getBytes());\r\n			String idCardNo = new String(encode_byte);\r\n			String uniqueId = sandboxDataSetTar.getContractUniqueId();\r\n			Date taskExecuteDate = DateUtils.addDays(DateUtils.getToday(), 1);\r\n\r\n			List<PaymentPlanSnapshot> paymentPlanSnapshotSrcList = sandboxDataSetSrc.getPaymentPlanSnapshotList();\r\n			Map<Integer,PaymentPlanSnapshot> srcMap=new HashMap<Integer,PaymentPlanSnapshot>();\r\n			for (PaymentPlanSnapshot paymentPlanSnapshot : paymentPlanSnapshotSrcList) {\r\n				srcMap.put(paymentPlanSnapshot.getCurrentPeriod(), paymentPlanSnapshot);\r\n			}\r\n			List<PaymentPlanSnapshot> paymentPlanSnapshotList = sandboxDataSetTar.getPaymentPlanSnapshotList();\r\n			for (PaymentPlanSnapshot paymentPlanSnapshot : paymentPlanSnapshotList) {\r\n				HashMap<String, Object> map = new HashMap<String, Object>();\r\n				map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n				map.put(\"loanNo\", uniqueId);\r\n				map.put(\"thirdUserNo\", idCardNo);\r\n\r\n				PaymentPlanSnapshot srcSnapshot = (PaymentPlanSnapshot)srcMap.get(paymentPlanSnapshot.getCurrentPeriod());\r\n				map.put(\"installmentNo\", paymentPlanSnapshot.getCurrentPeriod());\r\n\r\n				//所有第0期，应收表中的应收金额不用做减法\r\n				int installmentNo = Integer.valueOf(map.get(\"installmentNo\").toString());\r\n				if (0 == installmentNo) {\r\n					map.put(\"principal\", paymentPlanSnapshot.getAssetPrincipalValue());\r\n					map.put(\"interest\", paymentPlanSnapshot.getAssetInterestValue());\r\n					map.put(\"repayCharge\", paymentPlanSnapshot.getRepayCharge());\r\n				}else{\r\n					map.put(\"principal\", paymentPlanSnapshot.getAssetPrincipalValue().subtract(srcSnapshot.getAssetPrincipalValue()));\r\n					map.put(\"interest\", paymentPlanSnapshot.getAssetInterestValue().subtract(srcSnapshot.getAssetInterestValue()));\r\n					map.put(\"repayCharge\",paymentPlanSnapshot.getRepayCharge().subtract(srcSnapshot.getRepayCharge()));\r\n\r\n				}\r\n\r\n				map.put(\"changeType\", changeType);\r\n				map.put(\"tradeTime\", paymentPlanSnapshot.getCreateTime());\r\n\r\n				JSONObject jsonObject = new JSONObject(map);\r\n				String workParam = com.zufangbao.sun.utils.JsonUtils.toJSONString(jsonObject);\r\n\r\n				DelayProcessingTask task = new DelayProcessingTask(paymentPlanSnapshot, taskExecuteDate, workParam,\r\n                        configUuid);\r\n				delayProcessingTaskHandler.save_to_db_cache(task);\r\n			}\r\n			return true;\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n			return false;\r\n		}\r\n	}', 'a4f3125d-393b-11e7-bf99-00163e002839', NULL, '2017-05-15 18:20:38', '2017-05-15 18:20:38', 'sys',
'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,com.alibaba.fastjson.JSONObject,org.apache.commons.logging.Log');

INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`) VALUES ('16', '8aec6aa6-46ac-11e7-881a-b208103af10b', 'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler,\r\n			SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object> inputMap, Map<String, Object> resultMap,Log log) {\r\n		try {\r\n			// 调用时无需转发不必判断processedResult\r\n			String financialContractUuid = (String) inputMap.get(SandboxDataSetSpec.FINANCIAL_CONTRACT_UUID);\r\n			String contractUuid = (String) inputMap.get(SandboxDataSetSpec.CONTRACT_UUID);\r\n			List<String> repaymentPlanNoList = (List<String>) inputMap.get(SandboxDataSetSpec.REPAYMENT_PLAN_NO_LIST);\r\n			String configUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONFING_UUID, \"\");\r\n\r\n			SandboxDataSet sandboxDataSet = sandboxDataSetHandler\r\n					.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid, repaymentPlanNoList);\r\n			\r\n			String extraItem = (String) inputMap.getOrDefault(SandboxDataSetSpec.EXTRA_ITEM, \"\");\r\n			if (StringUtils.isEmpty(extraItem)) {\r\n				return false;\r\n			}\r\n\r\n			Map<String, Object> extraParam = com.zufangbao.sun.utils.JsonUtils.parse(extraItem);\r\n			String reason = (String) extraParam.getOrDefault(SandboxDataSetSpec.ExtraItem.REASON_CODE, \"\");\r\n			int reasonCode = Integer.valueOf(reason);\r\n\r\n			String changeType = null;\r\n			if (MutableFeeReasonCode.OVERDUE.ordinal() == reasonCode) {\r\n				changeType = \"7\";\r\n			} else if (MutableFeeReasonCode.CHARGE_CHANGE.ordinal() == reasonCode) {\r\n				changeType = \"9\";\r\n			}\r\n			if (changeType == null) {\r\n				return false;\r\n			}\r\n\r\n			byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSet.getIdCardNo().getBytes());\r\n			String idCardNo = new String(encode_byte);\r\n			String uniqueId = sandboxDataSet.getContractUniqueId();\r\n			Date taskExecuteDate = DateUtils.addDays(DateUtils.getToday(), 1);\r\n\r\n			List<PaymentPlanSnapshot> paymentPlanSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\r\n			for (PaymentPlanSnapshot paymentPlanSnapshot : paymentPlanSnapshotList) {\r\n				HashMap<String, Object> map = new HashMap<String, Object>();\r\n				map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n				map.put(\"loanNo\", uniqueId);\r\n				map.put(\"thirdUserNo\", idCardNo);\r\n				map.put(\"changeType\", changeType);\r\n				map.put(\"installmentNo\", paymentPlanSnapshot.getCurrentPeriod());\r\n				map.put(\"tradeTime\", paymentPlanSnapshot.getLastModifiedTime());\r\n\r\n				map.put(\"principal\",  extraParam.get(SandboxDataSetSpec.ExtraItem.PRINCIPAL));\r\n				map.put(\"interest\",  extraParam.get(SandboxDataSetSpec.ExtraItem.INTEREST));\r\n				map.put(\"repayCharge\",  extraParam.get(SandboxDataSetSpec.ExtraItem.REPAY_CHARGE));\r\n\r\n				JSONObject jsonObject = new JSONObject(map);\r\n				String workParam = com.zufangbao.sun.utils.JsonUtils.toJSONString(jsonObject);\r\n\r\n				DelayProcessingTask task = new DelayProcessingTask(paymentPlanSnapshot, taskExecuteDate, workParam,\r\n						configUuid);\r\n				delayProcessingTaskHandler.save_to_db_cache(task);\r\n			}\r\n			return true;\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n			return false;\r\n		}\r\n	}', '93a25ac0-46ac-11e7-881a-b208103af10b', NULL, '2017-05-11 23:57:53', '2017-05-11 23:57:53', 'sys',
'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,com.alibaba.fastjson.JSONObject,com.zufangbao.sun.yunxin.entity.api.mutableFee.MutableFeeReasonCode,org.apache.commons.logging.Log');


SET FOREIGN_KEY_CHECKS=1;