SET FOREIGN_KEY_CHECKS = 0;
USE galaxy_autotest_yunxin;

DELETE FROM dictionary;
DELETE FROM customer;
DELETE FROM financial_contract;
DELETE FROM ledger_book;
DELETE FROM contract;
DELETE FROM asset_package;
DELETE FROM company;
DELETE FROM app;
DELETE FROM asset_set;
DELETE FROM asset_set_extra_charge;
DELETE FROM ledger_book_shelf;
DELETE FROM finance_company;
DELETE FROM account;
DELETE FROM principal;
DELETE FROM t_api_config;
DELETE FROM t_merchant_config;

DELETE FROM t_product_category;
DELETE FROM t_source_repository;

INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES (1, 'e5b170ac-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'SXH-DeferredPayment', '随心还-延期还款',
           'modify-repaymentPlan/zhongan/SXH-DeferredPayment', '/api/v3/modifyRepaymentPlan', NULL, 1, 'bd66bc1ee50ac64665f6aace2c419d57', NULL, NULL, NULL, NULL,
                                                                                                    NULL, NULL, '3', NULL, NULL, NULL, NULL, NULL,
        '374da0c4-3935-11e7-952e-ba77244e1da4');
INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES (2, 'e5b4c784-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'SXH-ChangeRepaymentDate', '随心还-变更还款日期',
           'modify-repaymentPlan/zhongan/SXH-ChangeRepaymentDate', '/api/v3/modifyRepaymentPlan', NULL, 1, 'c28ffe7a533a8a63c45a5d8043be64cf', NULL, NULL, NULL, NULL,
                                                                                                        NULL, NULL, '4', NULL, NULL, NULL, NULL, NULL,
        '374da0c4-3935-11e7-952e-ba77244e1da4');
INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES (3, 'e5b51950-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'SXH-Prepayment', '随心还-提前还款',
           'modify-repaymentPlan/zhongan/SXH-Prepayment', '/api/v3/modifyRepaymentPlan', NULL, 1, '50a95a59e34a7b75fb8bd1dc40f36fd2', NULL, NULL, NULL, NULL, NULL,
                                                                                               NULL, '5', NULL, NULL, NULL, NULL, NULL,
        '402fd71a-393b-11e7-bf99-00163e002839');
INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES (4, 'e5b5e92a-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'SXH-Cancel', '随心还-取消随心还服务',
           'modify-repaymentPlan/zhongan/SXH-Cancel', '/api/v3/modifyRepaymentPlan', NULL, 1, '77fe0585be47e201941bf5b8269ed46f', NULL, NULL, NULL, NULL, NULL, NULL,
                                                                                           '6', NULL, NULL, NULL, NULL, NULL, '402fd71a-393b-11e7-bf99-00163e002839');
INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES
  (5, 'e5b637ea-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'Prepayment', '佰仟提前还款', 'modify-repaymentPlan/zhongan/Prepayment',
      '/api/v3/modifyRepaymentPlan', NULL, 1, '571962a40709cfedceb647658120ff44', NULL, NULL, NULL, NULL, NULL, NULL, '7', NULL, NULL, NULL, NULL, NULL,
   '402fd71a-393b-11e7-bf99-00163e002839');
INSERT INTO `galaxy_autotest_yunxin`.`t_product_category` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `pre_process_interface_url`, `post_process_interface_url`, `pre_process_script`, `status`, `script_md_5_version`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`, `delay_task_config_uuid`)
VALUES (6, 'e5b761b0-2af6-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', 'modify-repaymentPlan', '变更还款计划', 'Refunds', '佰仟退货', 'modify-repaymentPlan/zhongan/Refunds',
           '/api/v3/modifyRepaymentPlan', NULL, 1, '0c811a7d9710c01ba26bec4a13807fba', NULL, NULL, NULL, NULL, NULL, NULL, '8', NULL, NULL, NULL, NULL, NULL,
        '402fd71a-393b-11e7-bf99-00163e002839');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (1, 'modify-repaymentPlan/zhongan/SXH-DeferredPayment',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n        logger.info(\"SXHDeferredPaymentServices has been started\");\n        String uniqueId = (String) preRequest.getOrDefault(\"uniqueId\",\"\");\n        String contractNo = (String)preRequest.getOrDefault(\"contractNo\",\"\");\n        if (StringUtils.isEmpty(uniqueId) && StringUtils.isEmpty(contractNo)) {\n            logger.error(\"SXHDeferredPaymentServices:uniqueId和contractNo需要赋值一个\");\n            postRequest.put(\"errorMsg\", \"uniqueId和contractNo需要赋值一个\");\n            return false; \n        }\n        String requestData = (String)preRequest.getOrDefault(\"requestData\",\"\");\n        logger.info(\"SXHDeferredPaymentServices get sandboxDataSet\");\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(uniqueId, contractNo);\n        if (null == sandboxDataSet) {\n            logger.error(\"SXHDeferredPaymentServices:sandboxDataSet is null\");\n            postRequest.put(\"errorMsg\", \"sandboxDataSet is null\");\n            return false;\n        }\n        FinancialContractSnapshot financialContractSnapshot = sandboxDataSet.getFinancialContractSnapshot();\n        if (null == financialContractSnapshot) {\n            logger.error(\"SXHDeferredPaymentServices:financialContractSnapshot is null\");\n            postRequest.put(\"errorMsg\", \"financialContractSnapshot is null\");\n            return false;\n        }\n        if(!financialContractSnapshot.isAllowFreewheelingRepayment()){\n            logger.error(\"SXHDeferredPaymentServices:信托合同[\"+financialContractSnapshot.getContractNo()+\"]不支持随心还\");\n            postRequest.put(\"errorMsg\", \"信托合同不支持随心还\");\n            return false;\n        }\n        List<PaymentPlanSnapshot> assetSetSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\n        List<RepaymentPlanModifyRequestDataModel> models = JsonUtils.parseArray(requestData, RepaymentPlanModifyRequestDataModel.class);\n        try{\n            if(CollectionUtils.isEmpty(assetSetSnapshotList)){\n                logger.error(\"SXHDeferredPaymentServices:assetSetSnapshotList is Empty\");\n                postRequest.put(\"errorMsg\", \"assetSetSnapshotList is Empty\");\n                return false;\n            }\n            if(CollectionUtils.isEmpty(models) || models.size() != assetSetSnapshotList.size()){\n                logger.error(\"SXHDeferredPaymentServices:还款计划数不匹配\");\n                postRequest.put(\"errorMsg\", \"还款计划数不匹配\");\n                return false;\n            }\n            int globalMonDelta = 0;\n            for(int i = 0, len = models.size(); i < len; i ++){\n                PaymentPlanSnapshot assetSetSnapshot = (PaymentPlanSnapshot)assetSetSnapshotList.get(i);\n                RepaymentPlanModifyRequestDataModel modifyRequestDataModel = (RepaymentPlanModifyRequestDataModel)models\n                        .get(i);\n                String asset_interest_principal_fingerPrint = modifyRequestDataModel\n                        .asset_interest_principal_fingerPrint();\n                if (!assetSetSnapshot\n                        .check_asset_interest_principal_fingerPrint(asset_interest_principal_fingerPrint)) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划基础费用不匹配\");\n                    postRequest.put(\"errorMsg\", \"还款计划基础费用不匹配\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_clear_repayment_plan()) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已结清不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已结清\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_overdue_repayment_plan()) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已逾期不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已逾期\");\n                    return false;\n                }\n                OnAccountStatus onAccountStatus = assetSetSnapshot.getOnAccountStatus();\n                if (OnAccountStatus.ON_ACCOUNT != onAccountStatus) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]部分结算不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划部分结算\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_today_repayment_plan()) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]还款当日不允许变更\");\n                    postRequest.put(\"errorMsg\", \"还款当日不允许变更\");\n                    return false;\n                }\n                PaymentPlanExtraChargeSnapshot assetSetExtraChargeSnapshot = assetSetSnapshot\n                        .getAssetSetExtraChargeSnapshot();\n                if (null == assetSetExtraChargeSnapshot) {\n                    logger.error(\"SXHDeferredPaymentServices:assetSetExtraChargeSnapshot is null\");\n                    postRequest.put(\"errorMsg\", \"assetSetExtraChargeSnapshot is null\");\n                    return false;\n                }\n\n                String assetExtraFeeFingerPrint = modifyRequestDataModel.assetExtraFeeFingerPrint();\n                if (!assetSetExtraChargeSnapshot.check_assetExtraFeeFingerPrint(assetExtraFeeFingerPrint)) {\n                    logger.error(\"SXHDeferredPaymentServices:还款计划其他费用不匹配\");\n                    postRequest.put(\"errorMsg\", \"还款计划其他费用不匹配\");\n                    return false;\n                }\n                // 延期还款仅仅变更月份\n                Date assetRecycleDate = assetSetSnapshot.getAssetRecycleDate();\n                Date model_date = modifyRequestDataModel.getDate();\n                int snapshot_day = DateUtils.day(assetRecycleDate);\n                int model_day = DateUtils.day(model_date);\n                if (snapshot_day != model_day) {\n                    logger.error(\"SXHDeferredPaymentServices:延期还款仅可变更月份\");\n                    postRequest.put(\"errorMsg\", \"延期还款仅可变更月份\");\n                    return false;\n                }\n                \n                // 还款日为29/30/31日时不得延期\n                if (Arrays.asList(29, 30, 31).contains(model_day)) {\n                    logger.error(\"SXHDeferredPaymentServices:还款日为29/30/31日时不得延期\");\n                    postRequest.put(\"errorMsg\", \"还款日为29/30/31日时不得延期\");\n                    return false;\n                }\n\n                Date addOneMonth = DateUtils.addMonths(assetRecycleDate, 1);\n                boolean one_month_late = DateUtils.isSameMonth(addOneMonth, model_date);\n                Date addTwoMonths = DateUtils.addMonths(assetRecycleDate, 2);\n                boolean two_months_late = DateUtils.isSameMonth(addTwoMonths, model_date);\n\n                if (!one_month_late && !two_months_late) {\n                    logger.error(\"SXHDeferredPaymentServices:延期还款月份变更在两个月内\");\n                    postRequest.put(\"errorMsg\", \"延期还款月份变更在两个月内\");\n                    return false;\n                }\n                int monDelta = one_month_late ? 1 : 2;\n                // 月份变化\n                if (globalMonDelta == 0) {\n                    globalMonDelta = monDelta;\n                    continue;\n                }\n                // 月份变化量相同\n                if (globalMonDelta != monDelta) {\n                    logger.error(\"SXHDeferredPaymentServices:月份变化量必须相同\");\n                    postRequest.put(\"errorMsg\", \"月份变化量必须相同\");\n                    return false;\n                }\n            }\n            postRequest.putAll(preRequest);\n            postRequest.put(\"fn\",\"200001\");\n            postRequest.put(\"requestReason\", RepaymentPlanModifyReason.REASON_4.getOrdinal() + \"\");\n            logger.info(\"SXHDeferredPaymentServices is end\");\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"SXHDeferredPaymentServices exception occurred\");\n            return false;\n        }\n    }',
        'bd66bc1ee50ac64665f6aace2c419d57', NULL, '2017-05-04 19:03:42', '2017-08-03 18:26:14', 'fanxiaofan',
        'java.util.*,org.apache.commons.collections.CollectionUtils,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.utils.*,com.suidifu.matryoshka.snapshot.*,com.suidifu.matryoshka.customize.CustomizeServices,com.demo2do.core.utils.JsonUtils');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (2, 'modify-repaymentPlan/zhongan/SXH-ChangeRepaymentDate',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n        logger.info(\"SXHChangeRepaymentDateServices has been started\");\n        String uniqueId = (String) preRequest.getOrDefault(\"uniqueId\",\"\");\n        String contractNo = (String)preRequest.getOrDefault(\"contractNo\",\"\");\n        if (StringUtils.isEmpty(uniqueId) && StringUtils.isEmpty(contractNo)) {\n            logger.error(\"SXHChangeRepaymentDateServices:uniqueId和contractNo需要赋值一个\");\n            postRequest.put(\"errorMsg\", \"uniqueId和contractNo需要赋值一个\");\n            return false;\n        }\n        String requestData = (String)preRequest.getOrDefault(\"requestData\",\"\");\n        List<RepaymentPlanModifyRequestDataModel> models = JsonUtils.parseArray(requestData, RepaymentPlanModifyRequestDataModel.class);\n        logger.info(\"SXHChangeRepaymentDateServices get sandboxDataSet\");\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(uniqueId, contractNo);\n        if (null == sandboxDataSet) {\n            logger.error(\"SXHChangeRepaymentDateServices:sandboxDataSet is null\");\n            postRequest.put(\"errorMsg\", \"sandboxDataSet is null\");\n            return false;\n        }\n        if (null == sandboxDataSet.getFinancialContractSnapshot()) {\n            logger.error(\"SXHChangeRepaymentDateServices:financialContractSnapshot is null\");\n            postRequest.put(\"errorMsg\", \"financialContractSnapshot is null\");\n            return false;\n        }\n        if(!sandboxDataSet.getFinancialContractSnapshot().isAllowFreewheelingRepayment()){\n            logger.error(\"SXHChangeRepaymentDateServices:信托合同[\"+sandboxDataSet.getFinancialContractSnapshot().getContractNo()+\"]不支持随心还\");\n            postRequest.put(\"errorMsg\", \"信托合同不支持随心还\");\n            return false;\n        }\n        List<PaymentPlanSnapshot> assetSetSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\n        try{\n            if (CollectionUtils.isEmpty(assetSetSnapshotList)) {\n                logger.error(\"SXHChangeRepaymentDateServices:assetSetSnapshotList is Empty\");\n                postRequest.put(\"errorMsg\", \"assetSetSnapshotList is Empty\");\n                return false;\n            }\n            if (CollectionUtils.isEmpty(models) || models.size() != assetSetSnapshotList.size()) {\n                logger.error(\"SXHChangeRepaymentDateServices:还款计划数不匹配\");\n                postRequest.put(\"errorMsg\", \"还款计划数不匹配\");\n                return false;\n            }\n            int globalDayDelta = 0;\n            for(int i = 0, len = assetSetSnapshotList.size(); i < len; i ++){\n                PaymentPlanSnapshot assetSetSnapshot = (PaymentPlanSnapshot)assetSetSnapshotList.get(i);\n                RepaymentPlanModifyRequestDataModel modifyRequestDataModel = (RepaymentPlanModifyRequestDataModel)models.get(i);\n                String asset_interest_principal_fingerPrint = modifyRequestDataModel\n                        .asset_interest_principal_fingerPrint();\n                if (!assetSetSnapshot\n                        .check_asset_interest_principal_fingerPrint(asset_interest_principal_fingerPrint)) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划基础费用不匹配\");\n                    postRequest.put(\"errorMsg\", \"还款计划基础费用不匹配\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_clear_repayment_plan()) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已结清不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已结清\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_overdue_repayment_plan()) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已逾期不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已逾期\");\n                    return false;\n                }\n                OnAccountStatus onAccountStatus = assetSetSnapshot.getOnAccountStatus();\n                if (OnAccountStatus.ON_ACCOUNT != onAccountStatus) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]部分结算不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划部分结算\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_today_repayment_plan()) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]还款当日不允许变更\");\n                    postRequest.put(\"errorMsg\", \"还款当日不允许变更\");\n                    return false;\n                }\n                PaymentPlanExtraChargeSnapshot assetSetExtraChargeSnapshot = assetSetSnapshot\n                        .getAssetSetExtraChargeSnapshot();\n                if (null == assetSetExtraChargeSnapshot) {\n                    logger.error(\"SXHChangeRepaymentDateServices:assetSetExtraChargeSnapshot is null\");\n                    postRequest.put(\"errorMsg\", \"assetSetExtraChargeSnapshot is null\");\n                    return false;\n                }\n                String assetExtraFeeFingerPrint = modifyRequestDataModel.assetExtraFeeFingerPrint();\n                if (!assetSetExtraChargeSnapshot.check_assetExtraFeeFingerPrint(assetExtraFeeFingerPrint)) {\n                    logger.error(\"SXHChangeRepaymentDateServices:还款计划其他费用不匹配\");\n                    postRequest.put(\"errorMsg\", \"还款计划其他费用不匹配\");\n                    return false;\n                }\n                Date assetRecycleDate = assetSetSnapshot.getAssetRecycleDate();\n                Date model_date = modifyRequestDataModel.getDate();\n                int snapshot_month = DateUtils.month(assetRecycleDate);\n                int model_month = DateUtils.month(model_date);\n                if (snapshot_month != model_month) {\n                    logger.error(\"SXHChangeRepaymentDateServices:变更还款日期仅在本月内变更\");\n                    postRequest.put(\"errorMsg\", \"变更还款日期仅在本月内变更\");\n                    return false;\n                }\n\n                int dayDelta = DateUtils.compareTwoDatesOnDay(model_date, assetRecycleDate);\n                // 日期变化\n                if (globalDayDelta == 0) {\n                    globalDayDelta = dayDelta;\n                    if (globalDayDelta <= 0) {\n                        return false;\n                    }\n                    continue;\n                }\n                // 日期变化量相同\n                if (globalDayDelta != dayDelta) {\n                    logger.error(\"SXHChangeRepaymentDateServices:日期变化量必须相同\");\n                    postRequest.put(\"errorMsg\", \"日期变化量必须相同\");\n                    return false;\n                }\n            }\n            postRequest.putAll(preRequest);\n            postRequest.put(\"fn\",\"200001\");\n            postRequest.put(\"requestReason\", RepaymentPlanModifyReason.REASON_5.getOrdinal() + \"\");\n            logger.info(\"SXHChangeRepaymentDateServices is end\");\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"SXHChangeRepaymentDateServices exception occurred\");\n            return false;\n        }\n    }',
        'c28ffe7a533a8a63c45a5d8043be64cf', NULL, '2017-05-04 19:03:42', '2017-08-03 18:26:08', 'fanxiaofan',
        'java.util.*,com.suidifu.matryoshka.customize.CustomizeServices,com.zufangbao.sun.utils.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.yunxin.entity.model.api.modify.*,org.apache.commons.collections.CollectionUtils');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (3, 'modify-repaymentPlan/zhongan/SXH-Prepayment',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n        logger.info(\"SXHPrepaymentServices has been started\");\n        String uniqueId = (String) preRequest.getOrDefault(\"uniqueId\",\"\");\n        String contractNo = (String)preRequest.getOrDefault(\"contractNo\",\"\");\n        if (StringUtils.isEmpty(uniqueId) && StringUtils.isEmpty(contractNo)) {\n            logger.error(\"SXHPrepaymentServices:uniqueId和contractNo需要赋值一个\");\n            postRequest.put(\"errorMsg\", \"uniqueId和contractNo需要赋值一个\");\n            return false; \n        }\n        String requestData = (String)preRequest.getOrDefault(\"requestData\",\"\");\n        logger.info(\"SXHPrepaymentServices get sandboxDataSet\");\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(uniqueId, contractNo);\n        if (null == sandboxDataSet) {\n            logger.error(\"SXHPrepaymentServices:sandboxDataSet is null\");\n            postRequest.put(\"errorMsg\", \"sandboxDataSet is null\");\n            return false;\n        }\n        FinancialContractSnapshot financialContractSnapshot = sandboxDataSet.getFinancialContractSnapshot();\n        if (null == financialContractSnapshot) {\n            logger.error(\"SXHPrepaymentServices:financialContractSnapshot is null\");\n            postRequest.put(\"errorMsg\", \"financialContractSnapshot is null\");\n            return false;\n        }\n        if (!financialContractSnapshot.isAllowFreewheelingRepayment()) {\n            logger.error(\"SXHPrepaymentServices:信托合同[\"+financialContractSnapshot.getContractNo()+\"]不支持随心还\");\n            postRequest.put(\"errorMsg\", \"信托合同不支持随心还\");\n            return false;\n        }\n\n        List<PaymentPlanSnapshot> assetSetSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\n        List<RepaymentPlanModifyRequestDataModel> models = JsonUtils.parseArray(requestData, RepaymentPlanModifyRequestDataModel.class);\n        try{\n            if(CollectionUtils.isEmpty(assetSetSnapshotList)){\n                logger.error(\"SXHPrepaymentServices:assetSetSnapshotList is Empty\");\n                postRequest.put(\"errorMsg\", \"assetSetSnapshotList is Empty\");\n                return false;\n            }\n            for(int i = 0, len = models.size(); i < len; i ++){\n                PaymentPlanSnapshot assetSetSnapshot = (PaymentPlanSnapshot)assetSetSnapshotList.get(i);\n                RepaymentPlanModifyRequestDataModel modifyRequestDataModel = (RepaymentPlanModifyRequestDataModel)models\n                        .get(i);\n                if (assetSetSnapshot.is_clear_repayment_plan()) {\n                    logger.error(\"SXHPrepaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已结清不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已结清\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_overdue_repayment_plan()) {\n                    logger.error(\"SXHPrepaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已逾期不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已逾期\");\n                    return false;\n                }\n                OnAccountStatus onAccountStatus = assetSetSnapshot.getOnAccountStatus();\n                if (OnAccountStatus.ON_ACCOUNT != onAccountStatus) {\n                    logger.error(\"SXHPrepaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]部分结算不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划部分结算\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_today_repayment_plan()) {\n                    logger.error(\"SXHPrepaymentServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]还款当日不允许变更\");\n                    postRequest.put(\"errorMsg\", \"还款当日不允许变更\");\n                    return false;\n                }\n            }\n            postRequest.putAll(preRequest);\n            postRequest.put(\"fn\",\"200001\");\n            postRequest.put(\"requestReason\", RepaymentPlanModifyReason.REASON_6.getOrdinal() + \"\");\n            logger.info(\"SXHPrepaymentServices is end\");\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"SXHPrepaymentServices exception occurred\");\n            return false;\n\n        }\n    }',
        '50a95a59e34a7b75fb8bd1dc40f36fd2', NULL, '2017-05-04 19:03:42', '2017-08-04 15:02:03', 'fanxiaofan',
        'java.util.*,org.apache.commons.collections.CollectionUtils,com.zufangbao.sun.utils.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.suidifu.matryoshka.customize.CustomizeServices,com.demo2do.core.utils.JsonUtils');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (4, 'modify-repaymentPlan/zhongan/SXH-Cancel',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n        logger.info(\"SXHCancelServices has been started\");\n        String uniqueId = (String) preRequest.getOrDefault(\"uniqueId\",\"\");\n        String contractNo = (String)preRequest.getOrDefault(\"contractNo\",\"\");\n        if (StringUtils.isEmpty(uniqueId) && StringUtils.isEmpty(contractNo)) {\n            logger.error(\"SXHCancelServices:uniqueId和contractNo需要赋值一个\");\n            postRequest.put(\"errorMsg\", \"uniqueId和contractNo需要赋值一个\");\n            return false;\n        }\n        String requestData = (String)preRequest.getOrDefault(\"requestData\",\"\");\n        List<RepaymentPlanModifyRequestDataModel> models = JsonUtils.parseArray(requestData, RepaymentPlanModifyRequestDataModel.class);\n        logger.info(\"SXHCancelServices get sandboxDataSet\");\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(uniqueId, contractNo);\n        if (null == sandboxDataSet) {\n            logger.error(\"SXHCancelServices:sandboxDataSet is null\");\n            postRequest.put(\"errorMsg\", \"sandboxDataSet is null\");\n            return false;\n        }\n        if (null == sandboxDataSet.getFinancialContractSnapshot()) {\n            logger.error(\"SXHCancelServices:financialContractSnapshot is null\");\n            postRequest.put(\"errorMsg\", \"financialContractSnapshot is null\");\n            return false;\n        }\n        if(!sandboxDataSet.getFinancialContractSnapshot().isAllowFreewheelingRepayment()){\n            logger.error(\"SXHCancelServices:信托合同[\"+sandboxDataSet.getFinancialContractSnapshot().getContractNo()+\"]不支持随心还\");\n            postRequest.put(\"errorMsg\", \"信托合同不支持随心还\");\n            return false;\n        }\n        List<PaymentPlanSnapshot> assetSetSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\n        if (CollectionUtils.isEmpty(models) || models.size() != assetSetSnapshotList.size()) {\n            logger.error(\"SXHCancelServices:还款计划数不匹配\");\n            postRequest.put(\"errorMsg\", \"还款计划数不匹配\");\n            return false;\n        }\n        try{\n            for (int i = 0; i < assetSetSnapshotList.size(); i++) {\n                PaymentPlanSnapshot assetSetSnapshot = (PaymentPlanSnapshot) assetSetSnapshotList.get(i);\n                RepaymentPlanModifyRequestDataModel modifyRequestDataModel = (RepaymentPlanModifyRequestDataModel) models\n                        .get(i);\n                String asset_interest_principal_fingerPrint = modifyRequestDataModel.assetFingerPrint();\n                if (!assetSetSnapshot.checkAssetFingerPrint(asset_interest_principal_fingerPrint)) {\n                    logger.error(\"SXHCancelServices:还款计划基础费用不匹配\");\n                    postRequest.put(\"errorMsg\", \"还款计划基础费用不匹配\");\n                    return false;\n                }\n                    //还款成功和逾期\n                if (assetSetSnapshot.is_clear_repayment_plan()) {\n                    logger.error(\"SXHCancelServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已结清不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已结清\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_overdue_repayment_plan()) {\n                    logger.error(\"SXHCancelServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已逾期不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划已逾期\");\n                    return false;\n                }\n                OnAccountStatus onAccountStatus = assetSetSnapshot.getOnAccountStatus();\n                if (OnAccountStatus.ON_ACCOUNT != onAccountStatus) {\n                    logger.error(\"SXHCancelServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]部分结算不可变更\");\n                    postRequest.put(\"errorMsg\", \"还款计划部分结算\");\n                    return false;\n                }\n                if (assetSetSnapshot.is_today_repayment_plan()) {\n                    logger.error(\"SXHCancelServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]还款当日不允许变更\");\n                    postRequest.put(\"errorMsg\", \"还款当日不允许变更\");\n                    return false;\n                }\n\n            }\n\n            postRequest.putAll(preRequest);\n            postRequest.put(\"fn\",\"200001\");\n            postRequest.put(\"requestReason\", RepaymentPlanModifyReason.REASON_7.getOrdinal() + \"\");\n            logger.info(\"SXHCancelServices is end\");\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"SXHCancelServices exception occurred\");\n            return false;\n        }\n    }',
        '77fe0585be47e201941bf5b8269ed46f', NULL, '2017-05-04 19:03:42', '2017-08-03 18:16:11', 'fanxiaofan',
        'java.math.BigDecimal,java.util.*,com.suidifu.matryoshka.customize.CustomizeServices,com.zufangbao.sun.utils.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.yunxin.entity.model.api.modify.*,org.apache.commons.collections.CollectionUtils');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (5, 'modify-repaymentPlan/zhongan/Prepayment',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n	return false;\n}',
        '571962a40709cfedceb647658120ff44', NULL, '2017-05-04 19:03:42', '2017-08-03 18:16:47', 'fanxiaofan',
        'java.util.*,org.apache.commons.collections.CollectionUtils,com.zufangbao.sun.utils.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.suidifu.matryoshka.customize.CustomizeServices,com.demo2do.core.utils.JsonUtils');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (6, 'modify-repaymentPlan/zhongan/Refunds',
        'public boolean evaluate(SandboxDataSetHandler sandboxDataSetHandler, Map<String, String> preRequest, Map<String, String> postRequest, Log logger) {\n        logger.info(\"RefundsServices has been started\");\n        String uniqueId = (String) preRequest.getOrDefault(\"uniqueId\",\"\");\n        String contractNo = (String)preRequest.getOrDefault(\"contractNo\",\"\");\n        if (StringUtils.isEmpty(uniqueId) && StringUtils.isEmpty(contractNo)) {\n            logger.error(\"RefundsServices: uniqueId和contractNo需要赋值一个\");\n            postRequest.put(\"errorMsg\", \"uniqu eId和contractNo需要赋值一个\");\n            return false;\n        }\n        String requestData = (String)preRequest.getOrDefault(\"requestData\",\"\");\n        BigDecimal assetPrincipalAmount = BigDecimal.ZERO;\n        List<RepaymentPlanModifyRequestDataModel> models = JsonUtils.parseArray(requestData, RepaymentPlanModifyRequestDataModel.class);\n        logger.info(\"RefundsServices get sandboxDataSet\");\n        SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_for_apply_repurchase_by_contract_uniqueId_contractNo(uniqueId, contractNo);\n        if (null == sandboxDataSet) {\n            logger.error(\"RefundsServices:sandboxDataSet is null\");\n            postRequest.put(\"errorMsg\", \"sandboxDataSet is null\");\n            return false;\n        }\n        if (null == sandboxDataSet.getFinancialContractSnapshot()) {\n            logger.error(\"RefundsServices:financialContractSnapshot is null\");\n            postRequest.put(\"errorMsg\", \"financialContractSnapshot is null\");\n            return false;\n        }\n        if(!sandboxDataSet.getFinancialContractSnapshot().isAllowFreewheelingRepayment()){\n            logger.error(\"RefundsServices:信托合同[\"+sandboxDataSet.getFinancialContractSnapshot().getContractNo()+\"]不支持随心还\");\n            postRequest.put(\"errorMsg\", \"信托合同不支持随心还\");\n            return false;\n        }\n        List<PaymentPlanSnapshot> assetSetSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\n        if (CollectionUtils.isEmpty(assetSetSnapshotList)) {\n            logger.error(\"RefundsServices:assetSetSnapshotList is Empty\");\n            postRequest.put(\"errorMsg\", \"assetSetSnapshotList is Empty\");\n            return false;\n        }\n        try{\n            if (models.size() != 1) {\n                logger.error(\"RefundsServices:退货后还款计划只可剩余一期\");\n                postRequest.put(\"errorMsg\", \"退货后还款计划只可剩余一期\");\n                return false;\n            }\n            boolean isFirstPeriodMutable = false;\n            for(PaymentPlanSnapshot assetSetSnapshot: assetSetSnapshotList){\n                assetPrincipalAmount = assetPrincipalAmount.add(assetSetSnapshot.getAssetPrincipalValue());\n                if(1 == assetSetSnapshot.getCurrentPeriod()) {\n                    if (assetSetSnapshot.is_clear_repayment_plan()) {\n                        logger.error(\"RefundsServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已结清不可变更\");\n                        postRequest.put(\"errorMsg\", \"还款计划已结清\");\n                        return false;\n                    }\n                    if (assetSetSnapshot.is_overdue_repayment_plan()) {\n                        logger.error(\"RefundsServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]已逾期不可变更\");\n                        postRequest.put(\"errorMsg\", \"还款计划已逾期\");\n                        return false;\n                    }\n                    OnAccountStatus onAccountStatus = assetSetSnapshot.getOnAccountStatus();\n                    if (OnAccountStatus.ON_ACCOUNT != onAccountStatus) {\n                        logger.error(\"RefundsServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]部分结算不可变更\");\n                        postRequest.put(\"errorMsg\", \"还款计划部分结算\");\n                        return false;\n                    }\n                    if (assetSetSnapshot.is_today_repayment_plan()) {\n                        logger.error(\"RefundsServices:还款计划[\" + assetSetSnapshot.getSingleLoanContractNo() + \"]还款当日不允许变更\");\n                        postRequest.put(\"errorMsg\", \"还款当日不允许变更\");\n                        return false;\n                    }\n                    isFirstPeriodMutable = true;\n                }\n            }\n            if(!isFirstPeriodMutable){\n                logger.error(\"RefundsServices:首期判定失败\");\n                postRequest.put(\"errorMsg\", \"首期判定失败\");\n                return false;\n            }\n\n            RepaymentPlanModifyRequestDataModel modifyRequestDataModel = (RepaymentPlanModifyRequestDataModel)models.get(0);\n            //变更后本金不可小于原有本金\n            if(modifyRequestDataModel.getAssetPrincipal().compareTo(assetPrincipalAmount) < 0){\n                logger.error(\"RefundsServices:非法本金\");\n                postRequest.put(\"errorMsg\", \"非法本金\");\n                return false;\n            }\n\n            postRequest.putAll(preRequest);\n            postRequest.put(\"fn\",\"200001\");\n            postRequest.put(\"requestReason\", RepaymentPlanModifyReason.REASON_9.getOrdinal() + \"\");\n            logger.info(\"RefundsServices is end\");\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"RefundsServices exception occurred\");\n            return false;\n        }\n    }',
        '0c811a7d9710c01ba26bec4a13807fba', NULL, '2017-05-04 19:03:42', '2017-08-03 18:25:53', 'fanxiaofan',
        'java.util.*,org.apache.commons.collections.CollectionUtils,com.zufangbao.sun.utils.*,com.zufangbao.sun.yunxin.entity.OnAccountStatus,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.suidifu.matryoshka.customize.CustomizeServices,com.demo2do.core.utils.JsonUtils,java.math.*');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (9, '374da0c4-3935-11e7-952e-ba77244e1da4',
        'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler,\r\n                             SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object>\r\n                                     inputMap, Map<String, Object> resultMap) {\r\n        try {\r\n            if (processedResult != null && !StringUtils.equalsIngoreNull(\"0\", processedResult.getCode())) {\r\n                return false;\r\n            }\r\n            List<String> repaymentPlanNoList = (List<String>)inputMap.get(SandboxDataSetSpec.REPAYMENT_PLAN_NO_LIST);\r\n            String financialContractUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.FINANCIAL_CONTRACT_UUID, \"\");\r\n            String contractUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONTRACT_UUID, \"\");\r\n            String configUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONFING_UUID, \"\");\r\n\r\n            SandboxDataSet sandboxDataSet = sandboxDataSetHandler.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid,repaymentPlanNoList);\r\n            String changeType = (String) sandboxDataSet.getExtraData().getOrDefault(\"reasonCode\", null);\r\n            if (changeType == null || configUuid == null) {\r\n                return false;\r\n            }\r\n            if (StringUtils.equalsIngoreNull(changeType, RepaymentPlanModifyReason.REASON_4.getOrdinal() + \"\")) {\r\n                changeType = \"1\";\r\n            } else if (StringUtils.equalsIngoreNull(changeType, RepaymentPlanModifyReason.REASON_5.getOrdinal() + \"\")) {\r\n                changeType = \"2\";\r\n            } else {\r\n                return false;\r\n            }\r\n						byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSet.getIdCardNo().getBytes());\r\n						String idCardNo = new String(encode_byte);\r\n            String uniqueId = sandboxDataSet.getContractUniqueId();\r\n            Date taskExecuteDate = DateUtils.addDays(DateUtils.getToday(), 1);\r\n\r\n            List<PaymentPlanSnapshot> paymentPlanSnapshotList = sandboxDataSet.getPaymentPlanSnapshotList();\r\n            for (PaymentPlanSnapshot paymentPlanSnapshot: paymentPlanSnapshotList) {\r\n                HashMap<String, Object> map = new HashMap<String, Object>();\r\n                map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n                map.put(\"loanNo\", uniqueId);\r\n                map.put(\"thirdUserNo\", idCardNo);\r\n                map.put(\"installmentNo\", paymentPlanSnapshot.getCurrentPeriod());\r\n                map.put(\"agreedRepayDate\", paymentPlanSnapshot.getAssetRecycleDate());\r\n                map.put(\"changeType\", changeType);\r\n                map.put(\"tradeTime\", paymentPlanSnapshot.getCreateTime());\r\n\r\n                JSONObject jsonObject = new JSONObject(map);\r\n                String workParam = JsonUtils.toJSONString(jsonObject);\r\n\r\n                DelayProcessingTask task = new DelayProcessingTask(paymentPlanSnapshot, taskExecuteDate, workParam,\r\n                        configUuid);\r\n                delayProcessingTaskHandler.save_to_db_cache(task);\r\n            }\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }',
        'c9699350-3935-11e7-952e-ba77244e1da4', NULL, '2017-05-15 18:20:38', '2017-05-15 18:20:38', 'sys',
        'java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,com.alibaba.fastjson.JSONObject');
INSERT INTO `galaxy_autotest_yunxin`.`t_source_repository` (`id`, `business_type`, `source_code`, `signature`, `source_file_path`, `add_time`, `last_modify_time`, `author`, `compile_import`)
VALUES (10, '402fd71a-393b-11e7-bf99-00163e002839',
        'public boolean evaluate(Result processedResult, DelayProcessingTaskCacheHandler delayProcessingTaskHandler,\r\n			SandboxDataSetHandler sandboxDataSetHandler, Map<String, Object> inputMap, Map<String, Object> resultMap) {\r\n		try {\r\n\r\n			if (processedResult == null || !StringUtils.equalsIngoreNull(\"0\", processedResult.getCode())) {\r\n				return false;\r\n			}\r\n			String financialContractUuid = (String) inputMap.get(SandboxDataSetSpec.FINANCIAL_CONTRACT_UUID);\r\n			String contractUuid = (String) inputMap.get(SandboxDataSetSpec.CONTRACT_UUID);\r\n			List<String> repaymentPlanNoSrcList = (List<String>)inputMap.get(SandboxDataSetSpec.ORIGINAL_REPAYMENT_PLAN_NO_LIST);\r\n			List<String> repaymentPlanNoTarList = (List<String>)inputMap.get(SandboxDataSetSpec.REPAYMENT_PLAN_NO_LIST);\r\n	        String configUuid = (String) inputMap.getOrDefault(SandboxDataSetSpec.CONFING_UUID, \"\");\r\n\r\n			SandboxDataSet sandboxDataSetSrc = sandboxDataSetHandler\r\n					.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid, repaymentPlanNoSrcList);\r\n			SandboxDataSet sandboxDataSetTar = sandboxDataSetHandler\r\n					.get_sandbox_by_repaymentPlanNoList(financialContractUuid, contractUuid, repaymentPlanNoTarList);\r\n\r\n			String reason = (String) sandboxDataSetTar.getExtraData().getOrDefault(\"reasonCode\", null);\r\n			logger.info(\"DelayProcessingTask ReasonCode:[\" + reason + \"]\");\r\n\r\n			int reasonCode = Integer.valueOf(reason);\r\n\r\n			String changeType = null;\r\n			if (RepaymentPlanModifyReason.REASON_7.getOrdinal() == reasonCode) {\r\n				changeType = \"3\";\r\n			} else if (RepaymentPlanModifyReason.REASON_8.getOrdinal() == reasonCode) {\r\n				changeType = \"4\";\r\n			} else if (RepaymentPlanModifyReason.REASON_6.getOrdinal() == reasonCode) {\r\n				changeType = \"5\";\r\n			} else if (RepaymentPlanModifyReason.REASON_9.getOrdinal() == reasonCode) {\r\n				changeType = \"6\";\r\n			}\r\n			if (changeType == null) {\r\n				return false;\r\n			}\r\n			byte[] encode_byte = Base64.getEncoder().encode(sandboxDataSetTar.getIdCardNo().getBytes());\r\n			String idCardNo = new String(encode_byte);\r\n			String uniqueId = sandboxDataSetTar.getContractUniqueId();\r\n			Date taskExecuteDate = DateUtils.addDays(DateUtils.getToday(), 1);\r\n\r\n			List<PaymentPlanSnapshot> paymentPlanSnapshotSrcList = sandboxDataSetSrc.getPaymentPlanSnapshotList();\r\n			Map<Integer,PaymentPlanSnapshot> srcMap=new HashMap<Integer,PaymentPlanSnapshot>();\r\n			for (PaymentPlanSnapshot paymentPlanSnapshot : paymentPlanSnapshotSrcList) {\r\n				srcMap.put(paymentPlanSnapshot.getCurrentPeriod(), paymentPlanSnapshot);\r\n			}\r\n			List<PaymentPlanSnapshot> paymentPlanSnapshotList = sandboxDataSetTar.getPaymentPlanSnapshotList();\r\n			for (PaymentPlanSnapshot paymentPlanSnapshot : paymentPlanSnapshotList) {\r\n				HashMap<String, Object> map = new HashMap<String, Object>();\r\n				map.put(\"tradeNo\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\r\n				map.put(\"loanNo\", uniqueId);\r\n				map.put(\"thirdUserNo\", idCardNo);\r\n\r\n				PaymentPlanSnapshot srcSnapshot = (PaymentPlanSnapshot)srcMap.get(paymentPlanSnapshot.getCurrentPeriod());\r\n				map.put(\"installmentNo\", paymentPlanSnapshot.getCurrentPeriod());\r\n\r\n				//所有第0期，应收表中的应收金额不用做减法\r\n				int installmentNo = Integer.valueOf(map.get(\"installmentNo\").toString());\r\n				if (0 == installmentNo) {\r\n					map.put(\"principal\", paymentPlanSnapshot.getAssetPrincipalValue());\r\n					map.put(\"interest\", paymentPlanSnapshot.getAssetInterestValue());\r\n					map.put(\"repayCharge\", paymentPlanSnapshot.getRepayCharge());\r\n				}else{\r\n					map.put(\"principal\", paymentPlanSnapshot.getAssetPrincipalValue().subtract(srcSnapshot.getAssetPrincipalValue()));\r\n					map.put(\"interest\", paymentPlanSnapshot.getAssetInterestValue().subtract(srcSnapshot.getAssetInterestValue()));\r\n					map.put(\"repayCharge\",paymentPlanSnapshot.getRepayCharge().subtract(srcSnapshot.getRepayCharge()));\r\n\r\n				}\r\n\r\n				map.put(\"changeType\", changeType);\r\n				map.put(\"tradeTime\", paymentPlanSnapshot.getCreateTime());\r\n\r\n				JSONObject jsonObject = new JSONObject(map);\r\n				String workParam = com.zufangbao.sun.utils.JsonUtils.toJSONString(jsonObject);\r\n				DelayProcessingTask task = new DelayProcessingTask(paymentPlanSnapshot, taskExecuteDate, workParam,\r\n                        configUuid);\r\n				String taskJSONString = JsonUtils.toJSONString(task);\r\n        logger.info(\"DelayProcessingTask delayTask:[\"+taskJSONString+\"]\");\r\n				delayProcessingTaskHandler.save_to_db_cache(task);\r\n			}\r\n			return true;\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n			return false;\r\n		}\r\n	}',
        'a4f3125d-393b-11e7-bf99-00163e002839', NULL, '2017-05-15 18:20:38', '2017-05-15 18:20:38', 'sys',
        'org.apache.commons.logging.Log,org.apache.commons.logging.LogFactory,java.util.*,com.suidifu.matryoshka.delayTask.*,com.demo2do.core.entity.*,com.zufangbao.sun.yunxin.entity.model.api.modify.*,com.suidifu.matryoshka.snapshot.*,com.zufangbao.sun.utils.*,com.alibaba.fastjson.JSONObject');

DELETE FROM t_delay_processing_task_config;
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`)
VALUES
  (3, '374da0c4-3935-11e7-952e-ba77244e1da4', 'zhongan', '众安保险', '10000', '变更数据同步', '10001', '变更还款时间', 1, 0, 'c9699350-3935-11e7-952e-ba77244e1da4', 1, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
   NULL);
INSERT INTO `galaxy_autotest_yunxin`.`t_delay_processing_task_config` (`id`, `uuid`, `product_lv_1_code`, `product_lv_1_name`, `product_lv_2_code`, `product_lv_2_name`, `product_lv_3_code`, `product_lv_3_name`, `type_code`, `trigger_type_code`, `execute_code_version`, `status`, `date_field_one`, `date_field_two`, `date_field_three`, `long_field_one`, `long_field_two`, `long_field_three`, `string_field_one`, `string_field_two`, `string_field_three`, `decimal_field_one`, `decimal_field_two`, `decimal_field_three`)
VALUES
  (4, '402fd71a-393b-11e7-bf99-00163e002839', 'zhongan', '众安保险', '10000', '变更数据同步', '10002', '变更还款金额', 1, 0, 'a4f3125d-393b-11e7-bf99-00163e002839', 1, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
                                                                                                                                                     NULL, NULL, NULL,
   NULL);

INSERT INTO t_api_config (api_url, fn_code, description, api_status)
VALUES
  ('/api/v3/modifyRepaymentPlan', NULL, '变更还款计划', 1);

INSERT INTO principal (id, authority, name, password, start_date, thru_date, t_user_id, created_time, creator_id, modify_password_time)
VALUES (1, 'ROLE_SUPER_USER', 'zhanghongbing', '376c43878878ac04e05946ec1dd7a55f', NULL, NULL, 2, NULL, NULL, 1);

INSERT INTO dictionary (code, content)
VALUES
  ('PLATFORM_PRI_KEY',
   'MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAOXUGOKdEkssOI1zqNw4pb6emH1o1JYxooyTQ7FN1IBNqTJLuvA3GsswXIkuQj0imce6ywG/XOCwc9R1l5FwcORtwx2FihGCl7eBkhUwnT0EwGOEARPh96ey+TfvsvRaHOn672v1TEhajAftgm4l7fJDtHdGBjHOs+5Mlir9Z65RAgMBAAECgYEArtAiUZR5yrYLGgTEhyWLZK+Le7CWKtv8MQL+tUlm/mST8s7JlVfEyJKzgCCwf4HnCJXbPiwJgFqW8B61uAmXw6cEoPftEnzvKBTyISt/iEf7DTWKGkDBnlYM9sFU6pU61jw17XEDQRtSBG6cfrlGSelqf25+c8onxu4YwTeLH/ECQQD/H69tPy0FYRvCJ5yXdXEVCKshNN01P+UdDzGtyysE/gmpalbewT+uznApa0qFntcYb8eSpUJzrUlItSCBGUpdAkEA5p4r3qF+4g5V7MBHm3+v1l9JKxYK76990AQJa122rfkY2EEVuvU+8KIAQpVflu/HpDe8QH4mQZTsZj24Skt8hQJAL5j2vrgRqzZB2ohPY8aKcXUrkEdvmdaw5SoHh7gm74iBvvTS/j4ppnBnZqLYxXMsCCgaoNZqPnCvAnygctWIFQJAHm2KLkKyohLwJV+tUwgC5E8IMWYkJUHLYNHXiFICE2xFaesUeel313oYfLCGvzx9493yubOrSoXitw63rR3OnQJBALwGSnGYodmJB5k7un0X6LlO4nSu/+SX9lweloZ1AUg15IuCIYxHAFKwOtOJmx/eMcITaLq8l1qzZ907UXY+Mfs=');
INSERT INTO customer (id, app_id)
VALUES
  (54349, 2);
INSERT INTO financial_contract (id, asset_package_format, adva_matuterm, adva_start_date, contract_no, contract_name, app_id, company_id, adva_repo_term,
                                thru_date, capital_account_id, financial_contract_type, loan_overdue_start_day, loan_overdue_end_day, payment_channel_id,
                                ledger_book_no, financial_contract_uuid, sys_normal_deduct_flag, sys_overdue_deduct_flag, sys_create_penalty_flag, sys_create_guarantee_flag, unusual_modify_flag, sys_create_statement_flag, adva_repayment_term, allow_freewheeling_repayment)
VALUES
  (37, 0, 3, '2018-09-01 00:00:00', 'G32000', '用钱宝测试', 2, 1, 60, '2018-12-01 00:00:00', 101, 0, 1, 2, 1,
                                                                                             'e17d8068-46a0-48bb-b158-8e80168bbfc3',
                                                                                             'b674a323-0c30-4e4b-9eba-b14e05a9d80a',
                                                                                             0, 0, 0, 0, 1, 0, 7, 1);

INSERT INTO ledger_book (id, ledger_book_no, ledger_book_orgnization_id, book_master_id, party_concerned_ids)
VALUES
  (36, 'e17d8068-46a0-48bb-b158-8e80168bbfc3', '1', NULL, NULL);
INSERT INTO contract (id, uuid, unique_id, begin_date, contract_no, end_date, asset_type, month_fee, app_id, customer_id, house_id, actual_end_date, create_time, interest_rate, payment_day_in_month, payment_frequency, periods, repayment_way, total_amount, penalty_interest, active_version_no, repayment_plan_operate_logs, state, financial_contract_uuid)
VALUES
  (54340, '3e8711d4-9573-4965-a878-480ee4c1f5fc', 'e568793f-a44c-4362-9e78-0ce433131f3e', '2016-09-10',
          '云信信2016-241-DK(428522112675736881)', '2018-12-09', NULL, 0.00, 2, 54349, 54505, NULL, '2016-10-25 11:06:48',
                                                                                           0.8923000000, 0, 0, 2, 2,
                                                                                           4500.00, 0.0050000000, 1,
   NULL, 2, 'b674a323-0c30-4e4b-9eba-b14e05a9d80a'),
  (54341, '4e8711d4-9573-4965-a878-480ee4c1f5fc', 'e668793f-a44c-4362-9e78-0ce433131f3e', '2016-09-10',
          '云信信2016-241-DK(428522112675736882)', '2018-12-09', NULL, 0.00, 2, 54349, 54505, NULL, '2016-10-25 11:06:48',
                                                                                           0.8923000000, 0, 0, 2, 2,
                                                                                           4500.00, 0.0050000000, 1,
   NULL, 2, 'b674a323-0c30-4e4b-9eba-b14e05a9d80a');

INSERT INTO asset_package (id, is_available, create_time, contract_id, asset_package_no, financial_contract_id, loan_batch_id)
VALUES
  (54326, NULL, NULL, 54340, NULL, 37, 50131);

INSERT INTO account (id, account_name, account_no, bank_name, alias, attr, scan_cash_flow_switch, usb_key_configured, uuid, bank_code)
VALUES
  (101, '云南信托', '20001', '平安银行深圳分行', NULL, NULL, 0, 0, '8e3cd5c5-8fb6-4cd6-b6c7-660a9f35f47c', NULL);

INSERT INTO finance_company (id, company_id)
VALUES
  (1, 1);

INSERT INTO app (id, app_id, app_secret, is_disabled, host, name, company_id, addressee)
VALUES
  (2, 'qyb', NULL, 1, NULL, '测试商户yqb', 4, NULL);

INSERT INTO company (id, address, full_name, short_name, uuid)
VALUES
  (1, '上海', '测试金融公司', '测试金融', 'a02c02b9-6f98-11e6-bf08-00163e002839'),
  (4, '杭州', 'yqb', 'yqb', 'a02c08b5-6f98-11e6-bf08-00163e002839');


INSERT INTO asset_set (id, guarantee_status, settlement_status, asset_fair_value, asset_principal_value, asset_interest_value, asset_initial_value, asset_recycle_date, confirm_recycle_date, refund_amount, asset_status, on_account_status, repayment_plan_type, last_valuation_time, asset_uuid, create_time, last_modified_time, comment, single_loan_contract_no, contract_id, actual_recycle_date, current_period, overdue_status, overdue_date, version_no, active_status, sync_status, financial_contract_uuid, contract_uuid)
VALUES
  (148660, 0, 0, 90000.00, 80000.00, 10000.00, 90000.00, DATE_ADD(CURRENT_DATE(), INTERVAL 1 DAY), NULL, 0.00, 0, 1, 0, NULL,
                                                                                                                  '890d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                                                  '2016-10-25 11:06:48',
                                                                                                                  '2016-10-25 11:14:01', NULL,
                                                                                                                  'ZC275016985BF712EB', 54340,
                                                                                                                  '2016-10-25 11:14:01', 1, 0,
   NULL, 1, 0, 0, 'b674a323-0c30-4e4b-9eba-b14e05a9d80a', '3e8711d4-9573-4965-a878-480ee4c1f5fc'),
  (148662, 0, 0, 90000.00, 80000.00, 10000.00, 90000.00, '2018-12-10', NULL, 0.00, 0, 1, 0, NULL,
                                                                                      '190d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                      '2016-10-25 11:06:48',
                                                                                      '2016-10-25 11:14:01', NULL,
                                                                                      'ZC275016985BF712ED', 54341,
                                                                                      '2016-10-25 11:14:01', 1, 0,
   NULL, 1, 0, 0, 'b674a323-0c30-4e4b-9eba-b14e05a9d80a', '4e8711d4-9573-4965-a878-480ee4c1f5fc');

INSERT INTO asset_set_extra_charge (id, asset_set_extra_charge_uuid, asset_set_uuid, create_time, last_modify_time, first_account_name, first_account_uuid, second_account_name, second_account_uuid, third_account_name, third_account_uuid, account_amount)
VALUES
  (381437, '2afe06f0-5499-477a-b81a-4dd300416a86', '890d41d9-2484-46bb-a856-e987ef1da40e', '2016-10-25 11:06:48',
           '2016-10-25 11:06:48', 'FST_UNEARNED_LOAN_ASSET', '10000', 'SND_UNEARNED_LOAN_ASSET_OTHER_FEE', '10000.05',
           NULL, NULL, 3.60),
  (381438, 'b6eea1ba-b327-4970-ad81-973eb84042e2', '890d41d9-2484-46bb-a856-e987ef1da40e', '2016-10-25 11:06:48',
           '2016-10-25 11:06:48', 'FST_UNEARNED_LOAN_ASSET', '10000', 'SND_UNEARNED_LOAN_ASSET_TECH_FEE', '10000.04',
           NULL, NULL, 2.50);


INSERT INTO ledger_book_shelf (id, ledger_uuid, debit_balance, credit_balance, first_account_name, first_account_uuid, account_side, second_account_name, second_account_uuid, third_account_name, third_account_uuid, first_party_id, second_party_id, third_party_id, forward_ledger_uuid, backward_ledger_uuid, batch_serial_uuid, amortized_date, book_in_date, business_voucher_uuid, carried_over_date, contract_id, contract_uuid, default_date, journal_voucher_uuid, ledger_book_no, ledger_book_owner_id, life_cycle, related_lv_1_asset_outer_idenity, related_lv_1_asset_uuid, related_lv_2_asset_outer_idenity, related_lv_2_asset_uuid, related_lv_3_asset_outer_idenity, related_lv_3_asset_uuid, source_document_uuid)
VALUES
  (2055424, '4c2cb54a-0c67-4118-bb95-72f2616bd55f', 0.00, 1900.00, 'FST_LONGTERM_LIABILITY', '40000', 0,
            'SND_LONGTERM_LIABILITY_ABSORB_SAVING', '40000.01', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                            'cc384fb8-0fcc-4632-b723-bafde8dca88e',
                                                                            NULL, NULL, NULL,
                                                                            'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                            '2016-11-14', '2016-10-25 11:06:48', '',
                                                                            NULL, 54340,
                                                                                  '3e8711d4-9573-4965-a878-480ee4c1f5fc',
                                                                                  '2016-11-14 00:00:00', '',
                                                                                  'e17d8068-46a0-48bb-b158-8e80168bbfc3',
                                                                                  '1', 1, 'ZC275016985BF712EB',
                                                                                  '890d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                  NULL, NULL, NULL, NULL, ''),
  (2055425, '5040cef6-02a0-4e56-aa79-a7ba78f8c02e', 0.00, 1.00, 'FST_DEFERRED_INCOME', '100000', 0,
            'SND_DEFERRED_INCOME_INTEREST_ESTIMATE', '100000.01', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                              'cc384fb8-0fcc-4632-b723-bafde8dca88e',
                                                                              NULL, NULL, NULL,
                                                                              'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                              '2016-11-14', '2016-10-25 11:06:48', '',
                                                                              NULL, 54340,
                                                                                    '3e8711d4-9573-4965-a878-480ee4c1f5fc',
                                                                                    '2016-11-14 00:00:00', '',
                                                                                    'e17d8068-46a0-48bb-b158-8e80168bbfc3',
                                                                                    '1', 1, 'ZC275016985BF712EB',
                                                                                    '890d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                    NULL, NULL, NULL, NULL, ''),
  (2055426, 'e8919a9d-26f2-420e-9611-3d41745c217f', 2.50, 0.00, 'FST_UNEARNED_LOAN_ASSET', '10000', 1,
            'SND_UNEARNED_LOAN_ASSET_TECH_FEE', '10000.04', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                        'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL,
                                                                        NULL, NULL,
                                                                        'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                        '2016-11-14', '2016-10-25 11:06:48', '', NULL,
    54340, '3e8711d4-9573-4965-a878-480ee4c1f5fc', '2016-11-14 00:00:00', '', 'e17d8068-46a0-48bb-b158-8e80168bbfc3',
    '1', 1, 'ZC275016985BF712EB', '890d41d9-2484-46bb-a856-e987ef1da40e', NULL, NULL, NULL, NULL, ''),
  (2055427, '2e63f0bb-737a-4bef-beb4-c2885b5f1ddf', 1900.00, 0.00, 'FST_UNEARNED_LOAN_ASSET', '10000', 1,
            'SND_UNEARNED_LOAN_ASSET_PRINCIPLE', '10000.02', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                         'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL,
                                                                         NULL, NULL,
                                                                         'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                         '2016-11-14', '2016-10-25 11:06:48', '', NULL,
    54340, '3e8711d4-9573-4965-a878-480ee4c1f5fc', '2016-11-14 00:00:00', '', 'e17d8068-46a0-48bb-b158-8e80168bbfc3',
    '1', 1, 'ZC275016985BF712EB', '890d41d9-2484-46bb-a856-e987ef1da40e', NULL, NULL, NULL, NULL, ''),
  (2055428, 'b669c37c-2b55-49cd-86bf-5a39768c0c3d', 0.00, 3.60, 'FST_DEFERRED_INCOME', '100000', 0,
            'SND_DEFERRED_INCOME_FEE', '100000.02', 'TRD_DEFERRED_INCOME_LOAN_OTHER_FEE', '100000.02.03',
    'a02c02b9-6f98-11e6-bf08-00163e002839', 'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL, NULL, NULL,
    'd792767d-beb4-4862-89a9-6a15ed739456', '2016-11-14', '2016-10-25 11:06:48', '', NULL, 54340,
                                                                                           '3e8711d4-9573-4965-a878-480ee4c1f5fc',
                                                                                           '2016-11-14 00:00:00', '',
                                                                                           'e17d8068-46a0-48bb-b158-8e80168bbfc3',
                                                                                           '1', 1, 'ZC275016985BF712EB',
                                                                                           '890d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                           NULL, NULL, NULL, NULL, ''),
  (2055429, '05ce8a7a-e45e-48e1-9f40-117790dfdcac', 0.00, 2.50, 'FST_DEFERRED_INCOME', '100000', 0,
            'SND_DEFERRED_INCOME_FEE', '100000.02', 'TRD_DEFERRED_INCOME_LOAN_TECH_FEE', '100000.02.02',
    'a02c02b9-6f98-11e6-bf08-00163e002839', 'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL, NULL, NULL,
    'd792767d-beb4-4862-89a9-6a15ed739456', '2016-11-14', '2016-10-25 11:06:48', '', NULL, 54340,
                                                                                           '3e8711d4-9573-4965-a878-480ee4c1f5fc',
                                                                                           '2016-11-14 00:00:00', '',
                                                                                           'e17d8068-46a0-48bb-b158-8e80168bbfc3',
                                                                                           '1', 1, 'ZC275016985BF712EB',
                                                                                           '890d41d9-2484-46bb-a856-e987ef1da40e',
                                                                                           NULL, NULL, NULL, NULL, ''),
  (2055430, '439f543a-7f42-4ca2-bcd5-f065e8f3d04f', 3.60, 0.00, 'FST_UNEARNED_LOAN_ASSET', '10000', 1,
            'SND_UNEARNED_LOAN_ASSET_OTHER_FEE', '10000.05', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                         'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL,
                                                                         NULL, NULL,
                                                                         'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                         '2016-11-14', '2016-10-25 11:06:48', '', NULL,
    54340, '3e8711d4-9573-4965-a878-480ee4c1f5fc', '2016-11-14 00:00:00', '', 'e17d8068-46a0-48bb-b158-8e80168bbfc3',
    '1', 1, 'ZC275016985BF712EB', '890d41d9-2484-46bb-a856-e987ef1da40e', NULL, NULL, NULL, NULL, ''),
  (2055431, 'eff2a9f1-1c80-456c-8939-b6425f6d79f1', 1.00, 0.00, 'FST_UNEARNED_LOAN_ASSET', '10000', 1,
            'SND_UNEARNED_LOAN_ASSET_INTEREST', '10000.01', NULL, NULL, 'a02c02b9-6f98-11e6-bf08-00163e002839',
                                                                        'cc384fb8-0fcc-4632-b723-bafde8dca88e', NULL,
                                                                        NULL, NULL,
                                                                        'd792767d-beb4-4862-89a9-6a15ed739456',
                                                                        '2016-11-14', '2016-10-25 11:06:48', '', NULL,
    54340, '3e8711d4-9573-4965-a878-480ee4c1f5fc', '2016-11-14 00:00:00', '', 'e17d8068-46a0-48bb-b158-8e80168bbfc3',
    '1', 1, 'ZC275016985BF712EB', '890d41d9-2484-46bb-a856-e987ef1da40e', NULL, NULL, NULL, NULL, '');

INSERT INTO `t_merchant_config` (`id`, `mer_id`, `secret`, `company_id`, `pub_key_path`, `pub_key`, `project_code`, `encryption_mode`, `encryption_key`) VALUES
  (2, 't_test_zfb', '123456', 3, NULL,
   'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDl1BjinRJLLDiNc6jcOKW+nph9aNSWMaKMk0OxTdSATakyS7rwNxrLMFyJLkI9IpnHussBv1zgsHPUdZeRcHDkbcMdhYoRgpe3gZIVMJ09BMBjhAET4fensvk377L0Whzp+u9r9UxIWowH7YJuJe3yQ7R3RgYxzrPuTJYq/WeuUQIDAQAB',
   'spdbank', NULL, NULL);
INSERT INTO `t_merchant_config` (`id`, `mer_id`, `secret`, `company_id`, `pub_key_path`, `pub_key`, `project_code`, `encryption_mode`, `encryption_key`) VALUES
  (4, 'systemdeduct', '628c8b28bb6fdf5c5add6f18da47f1a6', 6, NULL,
   'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDl1BjinRJLLDiNc6jcOKW+nph9aNSWMaKMk0OxTdSATakyS7rwNxrLMFyJLkI9IpnHussBv1zgsHPUdZeRcHDkbcMdhYoRgpe3gZIVMJ09BMBjhAET4fensvk377L0Whzp+u9r9UxIWowH7YJuJe3yQ7R3RgYxzrPuTJYq/WeuUQIDAQAB',
   NULL, NULL, NULL);

SET FOREIGN_KEY_CHECKS = 1;